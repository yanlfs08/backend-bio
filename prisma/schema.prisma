// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- MODELOS DE APOIO ---

model Manufacturer {
  id       String    @id @default(uuid())
  name     String    @unique
  reagents Reagent[]

  @@map("manufacturers")
}

model StorageLocation {
  id            String          @id @default(uuid())
  name          String          @unique
  description   String?
  inventoryLots InventoryLot[]
  orderItems    OrderItem[]

  @@map("storage_locations")
}

model ReagentType {
  id        String            @id @default(uuid())
  name      String            @unique
  reagents  Reagent[]
  subtypes  ReagentSubtype[]

  @@map("reagent_types")
}

model ReagentSubtype {
  id       String      @id @default(uuid())
  name     String
  type_id  String
  type     ReagentType @relation(fields: [type_id], references: [id], onDelete: Cascade)
  reagents Reagent[]

  @@unique([name, type_id])
  @@map("reagent_subtypes")
}


// --- MODELOS PRINCIPAIS ---

model User {
  id                   String            @id @default(uuid())
  name                 String
  email                String            @unique
  password_hash        String
  roles                String[]          @default(["user"])
  is_active            Boolean           @default(true)
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt
  purchase_orders      PurchaseOrder[]
  approved_order_items OrderItem[]
  stock_withdrawals    StockWithdrawal[]

  @@map("users")
}

model Reagent {
  id                  String         @id @default(uuid())
  name                String
  catalog_number      String?        @unique
  unit_of_measure     String
  min_stock_level     Decimal?
  manufacturer_id     String?
  manufacturer        Manufacturer?  @relation(fields: [manufacturer_id], references: [id])
  type_id             String?
  type                ReagentType?   @relation(fields: [type_id], references: [id])
  subtype_id          String?
  subtype             ReagentSubtype? @relation(fields: [subtype_id], references: [id])
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt
  inventory_lots      InventoryLot[]
  order_items         OrderItem[]
  stock_withdrawals   StockWithdrawal[]

  @@map("reagents")
}

model InventoryLot {
  id                    String           @id @default(uuid())
  reagent_id            String
  reagent               Reagent          @relation(fields: [reagent_id], references: [id])
  order_item_id         String?          @unique
  order_item            OrderItem?       @relation(fields: [order_item_id], references: [id])
  quantity              Decimal
  expiration_date       DateTime?        @db.Date
  storage_location_id   String?
  storage_location      StorageLocation? @relation(fields: [storage_location_id], references: [id])
  received_at           DateTime         @default(now())
  stock_withdrawals   StockWithdrawal[]

  @@map("inventory_lots")
}

model PurchaseOrder {
  id              String              @id @default(uuid())
  status          PurchaseOrderStatus @default(pending_approval)
  requester_name  String?
  requester_email String?
  user_id         String?
  user            User?               @relation(fields: [user_id], references: [id], onDelete: SetNull)
  items           OrderItem[]
  created_at      DateTime            @default(now())
  updated_at      DateTime            @updatedAt

  @@map("purchase_orders")
}

model OrderItem {
  id                           String          @id @default(uuid())
  purchase_order_id            String
  purchase_order               PurchaseOrder   @relation(fields: [purchase_order_id], references: [id], onDelete: Cascade)
  reagent_id                   String
  reagent                      Reagent         @relation(fields: [reagent_id], references: [id])
  quantity_requested           Decimal
  price                        Decimal
  currency                     CurrencyType
  status                       OrderItemStatus @default(pending_approval)
  justification                String?
  approver_notes               String?
  approved_by_user_id          String?
  approved_by_user             User?           @relation(fields: [approved_by_user_id], references: [id], onDelete: SetNull)
  approved_at                  DateTime?
  quantity_received            Decimal?
  received_at                  DateTime?
  received_storage_location_id String?
  received_storage_location    StorageLocation? @relation(fields: [received_storage_location_id], references: [id])
  inventoryLot                 InventoryLot?

  @@map("order_items")
}

model ExchangeRate {
  id            String   @id @default(uuid())
  from_currency String   @default("USD")
  to_currency   String   @default("BRL")
  rate          Decimal
  rate_date     DateTime @db.Date
  created_at    DateTime @default(now())

  @@unique([from_currency, to_currency, rate_date])
  @@map("exchange_rates")
}

model StockWithdrawal {
  id                 String   @id @default(uuid())
  reagent_id         String
  reagent            Reagent  @relation(fields: [reagent_id], references: [id])
  quantity           Decimal
  withdrawn_by_name  String?
  withdrawn_by_email String?
  user_id            String?
  user               User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)
  created_at         DateTime @default(now())
  inventory_lot_id   String
  inventory_lot      InventoryLot @relation(fields: [inventory_lot_id], references: [id])

  @@map("stock_withdrawals")
}


// --- ENUMS ---

enum PurchaseOrderStatus {
  pending_approval
  partially_approved
  fully_approved
  rejected
  pending_receipt
  partially_received
  completed
}

enum OrderItemStatus {
  pending_approval
  approved
  rejected
  pending_receipt
  received
}

enum CurrencyType {
  BRL
  USD
}
